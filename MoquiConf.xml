<?xml version="1.0" encoding="UTF-8" ?>
<moqui-conf xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/moqui-conf-2.0.xsd">
    <webapp-list>
        <webapp name="webroot" https-enabled="false" require-session-token="false">
            <after-startup><actions>
                <script><![CDATA[
    import com.moqui.ssr.ReactSSRUtil
    import org.moqui.resource.ResourceReference
    String reactSSRStaticPath = "component://moqui-react-ssr/screen/ReactSSRRoot/static"
    Map<String, Map<String, Object>> jsSSRFileMap = new LinkedHashMap<>()

    jsSSRFileMap.putAll(ReactSSRUtil.getStaticJavascripts(ec, ['nashorn-polyfill'], true))
    jsSSRFileMap.put('vendor.', [ runOnce: true, resourceReference: null ])
    jsSSRFileMap.putAll(ReactSSRUtil.getStaticJavascript(ec, 'pre-app', false))
    jsSSRFileMap.put('app.', [ runOnce: false, resourceReference: null ])
    jsSSRFileMap.putAll(ReactSSRUtil.getStaticJavascript(ec, 'post-app', false))

    Map<String, ResourceReference> jsBrowserFileMap = new LinkedHashMap<>()
    jsBrowserFileMap.put('vendor.', null)
    jsBrowserFileMap.put('app.', null)

    Map<String, ResourceReference> cssFileMap = new LinkedHashMap<>()
    cssFileMap.put('app.', null)

    ResourceReference rr = ec.resource.getLocationReference("component://moqui-react-ssr-demo/screen/ReactSSRRoot/dist_ssr")
    for (ResourceReference fileRr in rr.getDirectoryEntries()) {
        if (!fileRr.isFile()) continue
        String fileName = fileRr.getFileName()
        if (fileName.endsWith(".js")) {
            jsSSRFileMap.each { entry ->
                if (fileName.startsWith(entry.key)) jsSSRFileMap[entry.key].resourceReference = fileRr
            }
        }
    }

    rr = ec.resource.getLocationReference("component://moqui-react-ssr-demo/screen/ReactSSRRoot/dist")
    for (ResourceReference fileRr in rr.getDirectoryEntries()) {
        if (!fileRr.isFile()) continue
        String fileName = fileRr.getFileName()
        if (fileName.endsWith(".js")) {
            jsBrowserFileMap.each { entry ->
                if (fileName.startsWith(entry.key)) entry.value = fileRr
            }
        } else if (fileName.endsWith(".css")) {
            cssFileMap.each { entry ->
                if (fileName.startsWith(entry.key)) cssFileMap[entry.key] = fileRr
            }
        }
    }

    def reactAppCache = ec.cache.getCache('react.ssr.apps.ReactSSRDemo')

    reactAppCache.put('jsBrowserFileMap', jsBrowserFileMap)
    reactAppCache.put('cssFileMap', cssFileMap)



    import com.moqui.ssr.React
    React react = ec.getTool("ReactSSR", React.class, "ReactSSRDemo", "/apps/react-ssr-demo",
            jsSSRFileMap,
            ['jsTimeout': 30000],
            ['minIdle': 30, 'maxIdle': 100])
                ]]></script>
            </actions></after-startup>
        </webapp>
    </webapp-list>

    <cache-list warm-on-start="true">
        <cache name="react.ssr.apps.ReactSSRDemo" value-type="Map"/>
    </cache-list>
</moqui-conf>